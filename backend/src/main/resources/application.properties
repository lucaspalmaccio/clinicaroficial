# ===================================================================
# CONFIGURAÇÃO DO SERVIDOR WEB
# Onde colocar: Geralmente não precisa mexer aqui.
# ===================================================================
# Define a porta em que a sua API vai rodar. 8080 é o padrão.
# Você acessará sua API em http://localhost:8080
server.port=8080

# ===================================================================
# CONFIGURAÇÃO DA CONEXÃO COM O BANCO DE DADOS (DATASOURCE)
# Onde colocar: Aqui você coloca os dados do seu DBeaver.
# ===================================================================
# URL de conexão para o PostgreSQL.
# Onde colocar: Mude 'petflow_db' APENAS se você usou um nome diferente ao criar o banco no DBeaver.
spring.datasource.url=jdbc:postgresql://localhost:5432/petflow_db

# Onde colocar: Coloque aqui o nome de usuário do seu PostgreSQL. O padrão é 'postgres'.
spring.datasource.username=postgres

# Onde colocar: AQUI VOCÊ DEVE COLOCAR A SUA SENHA PESSOAL DO BANCO DE DADOS.
# Esta é a mesma senha que você usou para testar a conexão no DBeaver.
spring.datasource.password=Andressa@55

# Driver JDBC do PostgreSQL. Não precisa mexer.
spring.datasource.driver-class-name=org.postgresql.Driver

# ===================================================================
# CONFIGURAÇÃO DO JPA/HIBERNATE (A "ponte" entre Java e o Banco)
# Onde colocar: Estas configurações são ideais para o desenvolvimento, não precisa alterá-las agora.
# ===================================================================
# Dialeto específico para o PostgreSQL, que ajuda o Hibernate a gerar o SQL correto.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Estratégia de geração do schema (tabelas) do banco.
# 'update' é perfeito para desenvolvimento: ele cria/atualiza as tabelas automaticamente
# com base nas suas classes @Entity, sem apagar os dados existentes.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console do IntelliJ o código SQL que o Hibernate está executando.
# É extremamente útil para ver o que está acontecendo por baixo dos panos.
spring.jpa.show-sql=true

# Formata o SQL mostrado no console para ficar mais fácil de ler.
spring.jpa.properties.hibernate.format_sql=true